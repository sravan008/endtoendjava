

Recursive functions have two cases, 1 is base case and other one is base case[Stop calling this function]
1. Identify the base case
2. Identify the recursive case
3. Get closer and closer and return when needed. usually you have 2 returns

Recursion : There are two ways we can represent this,  1 is stack and other one is Tree model

f(n)  = (2power(n+1)) -1  = f(2) = 2power 2+1 = 8 -1 = 7

If you have more recursion functions then traversing will be easy on Trees
Tree recursion traversing always from Top --to--> left --to--> Right

Instruction pointer - where it will be get's called from the stack

Towers of Hanoi :

in-order to move n d isks from x to y using z -->


Permutation : npr = n!/(n-r)!
